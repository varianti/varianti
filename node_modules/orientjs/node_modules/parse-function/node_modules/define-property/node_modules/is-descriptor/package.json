{
  "name": "is-descriptor",
  "description": "Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.",
  "version": "0.1.4",
  "homepage": "https://github.com/jonschlinkert/is-descriptor",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/is-descriptor"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/is-descriptor/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "utils.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "is-accessor-descriptor": "^0.1.6",
    "is-data-descriptor": "^0.1.4",
    "kind-of": "^3.0.2",
    "lazy-cache": "^1.0.3"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "keywords": [
    "accessor",
    "check",
    "data",
    "descriptor",
    "get",
    "getter",
    "is",
    "keys",
    "object",
    "properties",
    "property",
    "set",
    "setter",
    "type",
    "valid",
    "value"
  ],
  "verb": {
    "related": {
      "list": [
        "is-accessor-descriptor",
        "is-data-descriptor",
        "is-descriptor",
        "isobject"
      ]
    },
    "plugins": [
      "gulp-format-md"
    ]
  },
  "readme": "# is-descriptor [![NPM version](https://img.shields.io/npm/v/is-descriptor.svg)](https://www.npmjs.com/package/is-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDescriptor = require('is-descriptor');\n\nisDescriptor({value: 'foo'})\n//=> true\nisDescriptor({get: function(){}, set: function(){}})\n//=> true\nisDescriptor({get: 'foo', set: function(){}})\n//=> false\n```\n\nYou may also check for a descriptor by passing an object as the first argument and property name (`string`) as the second argument.\n\n```js\nvar obj = {};\nobj.foo = 'abc';\n\nObject.defineProperty(obj, 'bar', {\n  value: 'xyz'\n});\n\nisDescriptor(obj, 'foo');\n//=> true\nisDescriptor(obj, 'bar');\n//=> true\n```\n\n## Examples\n\n### value type\n\n`false` when not an object\n\n```js\nisDescriptor('a'))\n//=> false\nisDescriptor(null))\n//=> false\nisDescriptor([]))\n//=> false\n```\n\n### data descriptor\n\n`true` when the object has valid properties with valid values.\n\n```js\nisDescriptor({value: 'foo'}))\n//=> true\nisDescriptor({value: noop}))\n//=> true\n```\n\n`false` when the object has invalid properties\n\n```js\nisDescriptor({value: 'foo', bar: 'baz'}))\n//=> false\nisDescriptor({value: 'foo', bar: 'baz'}))\n//=> false\nisDescriptor({value: 'foo', get: noop}))\n//=> false\nisDescriptor({get: noop, value: noop}))\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDescriptor({value: 'foo', enumerable: 'foo'}))\n//=> false\nisDescriptor({value: 'foo', configurable: 'foo'}))\n//=> false\nisDescriptor({value: 'foo', writable: 'foo'}))\n//=> false\n```\n\n### accessor descriptor\n\n`true` when the object has valid properties with valid values.\n\n```js\nisDescriptor({get: noop, set: noop}))\n//=> true\nisDescriptor({get: noop}))\n//=> true\nisDescriptor({set: noop}))\n//=> true\n```\n\n`false` when the object has invalid properties\n\n```js\nisDescriptor({get: noop, set: noop, bar: 'baz'}))\n//=> false\nisDescriptor({get: noop, writable: true}))\n//=> false\nisDescriptor({get: noop, value: true}))\n//=> false\n```\n\n`false` when an accessor is not a function\n\n```js\nisDescriptor({get: noop, set: 'baz'}))\n//=> false\nisDescriptor({get: 'foo', set: noop}))\n//=> false\nisDescriptor({get: 'foo', bar: 'baz'}))\n//=> false\nisDescriptor({get: 'foo', set: 'baz'}))\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDescriptor({get: noop, set: noop, enumerable: 'foo'}))\n//=> false\nisDescriptor({set: noop, configurable: 'foo'}))\n//=> false\nisDescriptor({get: noop, configurable: 'foo'}))\n//=> false\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright Â© 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
  "readmeFilename": "README.md",
  "_id": "is-descriptor@0.1.4",
  "dist": {
    "shasum": "175ccb7c536f01278448ef5292ce7abd968c8e85"
  },
  "_from": "is-descriptor@^0.1.0",
  "_resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.4.tgz"
}
