{
  "name": "parse-function",
  "version": "2.3.0",
  "description": "Parse a function, arrow function or string to object with name, args, params and body properties.",
  "repository": {
    "type": "git",
    "url": "git://github.com/tunnckoCore/parse-function"
  },
  "author": {
    "name": "Charlike Mike Reagent",
    "email": "@tunnckoCore",
    "url": "http://www.tunnckocore.tk"
  },
  "precommit.silent": true,
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "test": "standard && node test.js"
  },
  "dependencies": {
    "acorn": "^2.7.0",
    "define-property": "^0.2.5"
  },
  "devDependencies": {
    "assertit": "^0.1.0",
    "benchmarked": "^0.1.5",
    "for-in": "^0.1.4",
    "pre-commit": "^1.1.2"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "args",
    "arguments",
    "arrow",
    "arrowfn",
    "body",
    "fn",
    "fns",
    "func",
    "function",
    "name",
    "obj",
    "object",
    "param",
    "paramerters",
    "params",
    "parse",
    "parse-function",
    "parser",
    "prop",
    "string",
    "tostring",
    "util"
  ],
  "readme": "# [parse-function][author-www-url] [![npmjs.com][npmjs-img]][npmjs-url] [![The MIT License][license-img]][license-url] \n\n> Parse a function, arrow function or string to object with `name`, `args`, `params` and `body` properties.\n\n[![code climate][codeclimate-img]][codeclimate-url] [![standard code style][standard-img]][standard-url] [![travis build status][travis-img]][travis-url] [![coverage status][coveralls-img]][coveralls-url] [![dependency status][david-img]][david-url]\n\n**Please read the [CHANGELOG](./CHANGELOG.md)!**\n\n## Pro Tips (What version to use?)\nThere's no breaking changes between versions, the only version that have partial breaking change is `v2.1.x`, so don't use it.\n\n- use `v2.0.x` - if you don't need support for `arrow functions` and `es6 default params`.\n- use `v2.2.x` - if you just want basic support for `es6 features` like `ES6 Arrow Functions` (faster than `v2.3.x`)\n- use `v2.3.x` - if you want full support of `es6 arrow functions` and `es6 default params` (this uses `acorn`)\n\n\n\n## Install\n```\nnpm i parse-function --save\n```\n\n\n## Usage\n> For more use-cases see the [tests](./test.js)\n\n```js\nconst parseFunction = require('parse-function')\n```\n\n### [parseFunction](./index.js#L45)\n> Parse function, arrow function or string to object. \n\n- `[val]` **{Function|ArrowFunction|String}** function or string to parse    \n- `returns` **{Object}** with `name`, `args`, `params` and `body` properties  \n  + `name` **{String}** name of the function or `anonymous`\n  + `body` **{String}** body of the function or `''`\n  + `params` **{String}** arguments names as string (as is) or empty string `''`\n  + `parameters` **{String}** hidden property, alias of `params`\n  + `args` **{Array}** arguments names as array, or empty array `[]`\n  + `arguments` **{Array}** hidden property, alias of `args`\n  + `value` **{String}** hidden property, string representation of the given `val`\n  + `orig` **{Function|ArrowFunction|String}** hidden property, original given `val`\n  + `valid` **{Boolean}** hidden property, `true` when `val` is function or string, `false` otherwise\n  + `invalid` **{Boolean}** hidden property, opposite of `opts.valid`\n  + `defaults` **{Object}** hidden property, empty object or ES6 default params\n\n**Example**\n\n```js\nconst parseFunction = require('parse-function')\n\nconst fixture = 'function testing (a, b, callback) { callback(null, a + b) }'\nconst obj = parseFunction(fixture)\n// => {\n//   name: 'testing',\n//   body: ' callback(null, a + b) ',\n//   params: 'a, b, callback',\n//   args: ['a', 'b', 'callback']\n// }\n\nconst withoutName = function (x, y) {}\nconst res = parseFunction(withoutName)\n// => {\n//   name: 'anonymous',\n//   body: '',\n//   params: 'x, y',\n//   args: ['x', 'y']\n// }\n```\n\n\n## Related\n- [function-regex](https://github.com/regexps/function-regex): Function regex. Regular expression for matching function parts. Expose match groups for function name, arguments and function body.\n- [gulp-di](https://github.com/cmtt/gulp-di): Dependency injection framework for the Gulp streaming build system\n- [is-empty-function](https://github.com/tunnckocore/is-empty-function): Check that given string, function or arrow function have empty body, using `parse-function`.\n- [is-installed](https://github.com/tunnckoCore/is-installed): Checks that given package is installed on the system - globally or locally.\n- [is-missing](https://github.com/tunnckocore/is-missing): Check that given `name` or `user/repo` exists in npm registry or in github as user repository.\n\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/tunnckoCore/parse-function/issues/new).  \nBut before doing anything, please read the [CONTRIBUTING.md](./CONTRIBUTING.md) guidelines.\n\n\n## [Charlike Make Reagent](http://j.mp/1stW47C) [![new message to charlike][new-message-img]][new-message-url] [![freenode #charlike][freenode-img]][freenode-url]\n\n[![tunnckocore.tk][author-www-img]][author-www-url] [![keybase tunnckocore][keybase-img]][keybase-url] [![tunnckoCore npm][author-npm-img]][author-npm-url] [![tunnckoCore twitter][author-twitter-img]][author-twitter-url] [![tunnckoCore github][author-github-img]][author-github-url]\n\n\n[npmjs-url]: https://www.npmjs.com/package/parse-function\n[npmjs-img]: https://img.shields.io/npm/v/parse-function.svg?label=parse-function\n\n[license-url]: https://github.com/tunnckoCore/parse-function/blob/master/LICENSE\n[license-img]: https://img.shields.io/badge/license-MIT-blue.svg\n\n\n[codeclimate-url]: https://codeclimate.com/github/tunnckoCore/parse-function\n[codeclimate-img]: https://img.shields.io/codeclimate/github/tunnckoCore/parse-function.svg\n\n[travis-url]: https://travis-ci.org/tunnckoCore/parse-function\n[travis-img]: https://img.shields.io/travis/tunnckoCore/parse-function.svg\n\n[coveralls-url]: https://coveralls.io/r/tunnckoCore/parse-function\n[coveralls-img]: https://img.shields.io/coveralls/tunnckoCore/parse-function.svg\n\n[david-url]: https://david-dm.org/tunnckoCore/parse-function\n[david-img]: https://img.shields.io/david/tunnckoCore/parse-function.svg\n\n[standard-url]: https://github.com/feross/standard\n[standard-img]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n\n\n[author-www-url]: http://www.tunnckocore.tk\n[author-www-img]: https://img.shields.io/badge/www-tunnckocore.tk-fe7d37.svg\n\n[keybase-url]: https://keybase.io/tunnckocore\n[keybase-img]: https://img.shields.io/badge/keybase-tunnckocore-8a7967.svg\n\n[author-npm-url]: https://www.npmjs.com/~tunnckocore\n[author-npm-img]: https://img.shields.io/badge/npm-~tunnckocore-cb3837.svg\n\n[author-twitter-url]: https://twitter.com/tunnckoCore\n[author-twitter-img]: https://img.shields.io/badge/twitter-@tunnckoCore-55acee.svg\n\n[author-github-url]: https://github.com/tunnckoCore\n[author-github-img]: https://img.shields.io/badge/github-@tunnckoCore-4183c4.svg\n\n[freenode-url]: http://webchat.freenode.net/?channels=charlike\n[freenode-img]: https://img.shields.io/badge/freenode-%23charlike-5654a4.svg\n\n[new-message-url]: https://github.com/tunnckoCore/ama\n[new-message-img]: https://img.shields.io/badge/ask%20me-anything-green.svg",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tunnckoCore/parse-function/issues"
  },
  "_id": "parse-function@2.3.0",
  "dist": {
    "shasum": "33744819bf56f3488713a5f84cf9ae7792aa1249"
  },
  "_from": "parse-function@^2.0.0",
  "_resolved": "https://registry.npmjs.org/parse-function/-/parse-function-2.3.0.tgz"
}
